<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://domagojhack.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://domagojhack.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-07-20T18:39:09+00:00</updated><id>https://domagojhack.github.io/feed.xml</id><title type="html">blank</title><subtitle>Computational ecology </subtitle><entry><title type="html">The essential toolkit</title><link href="https://domagojhack.github.io/blog/2023/toolkit/" rel="alternate" type="text/html" title="The essential toolkit"/><published>2023-07-27T00:00:00+00:00</published><updated>2023-07-27T00:00:00+00:00</updated><id>https://domagojhack.github.io/blog/2023/toolkit</id><content type="html" xml:base="https://domagojhack.github.io/blog/2023/toolkit/"><![CDATA[<p>I embarked on my Python programming journey in 2010, during my freshman year. Over time, I have grown familiar with Python’s unique characteristics and idiosyncrasies. The knowledge I have garnered through Python is extensive and includes: ***</p> <ul> <li>Building Graphical User Interfaces (GUIs)</li> <li>Constructing networks</li> <li>Managing servers</li> <li>Performing high-performance computing</li> <li>Developing AI tools</li> <li>Handling data</li> <li>Creating web applications</li> <li>Controlling IoT devices</li> <li>And much more…</li> </ul> <p>With each passing year, my understanding of Python has evolved, leading to a refinement of my best practices. In this post, I aim to share my indispensable toolkit – a compilation of Python libraries I rely on in 99% of the projects I undertake. However, before diving into that, let’s discuss the setup process.</p> <h2 id="setup">Setup</h2> <p>Beginners typically start their Python learning journey by visiting the python.org website and downloading the latest version of Python. While this approach is straightforward and provides the user with the pip library manager, it tends to fall short when the beginner wishes to explore more complex realms such as data science and AI. So, what’s the alternative for installing Python and harnessing state-of-the-art libraries for data science and AI?</p> <p>I personally resort to using conda, a robust toolkit developed by the Anaconda company to manage their suite of Python packages for data science and AI. However, my requirements go beyond what even this company can provide. As a result, I use a version supplied by the conda-forge community. conda-forge is an extensive collection of recipes, build tools, and distributions for the conda package manager, accommodating not just Python but other programming languages as well. You can download the conda-forge version of conda from <a href="https://github.com/conda-forge/miniforge/releases/">https://github.com/conda-forge/miniforge/releases/</a>. You will be presented with two options: Mambaforge or Miniforge. I prefer Mambaforge as it equips me with an additional package manager: <code class="language-plaintext highlighter-rouge">mamba</code>.</p> <p>Let’s take a step back…</p> <p>So, Python has three library managers: pip, conda, and mamba? How do they differ?</p> <p>Indeed, the differences are notable, and I find myself utilizing all three, depending on the task at hand:</p> <table> <thead> <tr> <th> </th> <th>pip</th> <th>conda</th> <th>mamba</th> </tr> </thead> <tbody> <tr> <td>Library manager</td> <td>✔️</td> <td>✔️</td> <td>✔️</td> </tr> <tr> <td>Virtual environment manager</td> <td>❌</td> <td>✔️</td> <td>✔️</td> </tr> <tr> <td>Conflict resolution</td> <td>❌</td> <td>✔️</td> <td>✔️</td> </tr> <tr> <td>Official support PyPI</td> <td>✔️</td> <td>❌</td> <td>❌</td> </tr> <tr> <td>Extended library</td> <td>❌</td> <td>✔️</td> <td>✔️</td> </tr> <tr> <td>Parallel processing</td> <td>❌</td> <td>❌</td> <td>✔️</td> </tr> </tbody> </table> <p>In a nutshell, <code class="language-plaintext highlighter-rouge">pip</code> excels in handling standard libraries, <code class="language-plaintext highlighter-rouge">conda</code> is ideal for managing virtual environments, and <code class="language-plaintext highlighter-rouge">mamba</code> is optimized for speed. Employing all three interchangeably can yield optimal results.</p> <ol> <li>To install <strong>mambaforge</strong> on a Linux system, use the following commands:</li> </ol> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-L</span> <span class="nt">-O</span> <span class="s2">"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-</span><span class="si">$(</span><span class="nb">uname</span><span class="si">)</span><span class="s2">-</span><span class="si">$(</span><span class="nb">uname</span> <span class="nt">-m</span><span class="si">)</span><span class="s2">.sh"</span>
bash Mambaforge-<span class="si">$(</span><span class="nb">uname</span><span class="si">)</span>-<span class="si">$(</span><span class="nb">uname</span> <span class="nt">-m</span><span class="si">)</span>.sh
</code></pre></div></div> <ol> <li>To create and activate a virtual environment, enter:</li> </ol> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create <span class="nt">-n</span> myenv
conda activate myenv
</code></pre></div></div> <p>Once these steps are complete, you can leverage the capabilities of <code class="language-plaintext highlighter-rouge">pip</code>, <code class="language-plaintext highlighter-rouge">conda</code>, and <code class="language-plaintext highlighter-rouge">mamba</code> in your environment.</p> <h3 id="what-is-a-virtual-environment">What is a virtual environment?</h3> <p>A virtual environment is an essential tool in Python development, particularly when working with multiple projects that may require different versions of libraries or even Python itself.</p> <p>A virtual environment, in the context of Python development, is an isolated environment where you can install Python packages without affecting your global Python setup. This setup allows you to have a unique and self-contained environment with its own installation directories and that doesn’t share libraries with other environments.</p> <p>This is very useful because different Python projects might require different versions of the same package, or might even be incompatible with each other. By isolating project-specific dependencies in a virtual environment, you can maintain project isolation and avoid conflicts between packages and libraries.</p> <p>For instance, if you have two projects, Project A and Project B, where Project A needs version 1.0 of a specific library, and Project B needs version 2.0 of the same library, a virtual environment can accommodate these requirements. By creating two separate virtual environments, you can have version 1.0 installed in Project A’s environment and version 2.0 in Project B’s environment. This way, when you run each project within its own virtual environment, it has access to the correct version of the library it needs.</p> <p>Tools like <code class="language-plaintext highlighter-rouge">conda</code> and <code class="language-plaintext highlighter-rouge">pipenv</code> allow you to easily create and manage these environments. Once an environment is activated, any packages installed will only affect that environment. Thus, maintaining and managing dependencies across different projects becomes significantly simpler with virtual environments.</p> <h3 id="lets-finally-install-python-and-create-an-virtual-environment">Lets finally install python and create an virtual environment:</h3> <ol> <li> <p>Installing <strong>mambaforge</strong> on linux system:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> curl <span class="nt">-L</span> <span class="nt">-O</span> <span class="s2">"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-</span><span class="si">$(</span><span class="nb">uname</span><span class="si">)</span><span class="s2">-</span><span class="si">$(</span><span class="nb">uname</span> <span class="nt">-m</span><span class="si">)</span><span class="s2">.sh"</span>
 bash Mambaforge-<span class="si">$(</span><span class="nb">uname</span><span class="si">)</span>-<span class="si">$(</span><span class="nb">uname</span> <span class="nt">-m</span><span class="si">)</span>.sh
</code></pre></div> </div> </li> <li> <p>Creating virtual environment</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> conda create <span class="nt">-n</span> myenv
 conda activate myenv
</code></pre></div> </div> </li> </ol> <p>Once these steps are complete, you can leverage the capabilities of <code class="language-plaintext highlighter-rouge">pip</code>, <code class="language-plaintext highlighter-rouge">conda</code>, and <code class="language-plaintext highlighter-rouge">mamba</code> in your environment.</p> <h2 id="the-toolkit">The toolkit</h2> <p>Let’s delve into the essential packages that are integral to my Python toolkit. I frequently use the following libraries:</p> <ul> <li> <p>NumPy: NumPy, which stands for ‘Numerical Python’, is the foundational package for numerical computing in Python. It provides support for arrays, matrices and a host of mathematical functions to operate on these data structures, making it indispensable for scientific computing tasks.</p> </li> <li> <p>SciPy: SciPy, or ‘Scientific Python’, builds on NumPy by adding a collection of algorithms and high-level commands for data manipulation and analysis. It includes modules for optimization, integration, interpolation, signal and image processing, statistics, and more, making it crucial for scientific and technical computing.</p> </li> <li> <p>Pandas: Pandas is a powerful data manipulation library in Python. It provides data structures for efficiently storing large datasets and tools for data wrangling and analysis. Its fundamental structure, the DataFrame, allows for handling and manipulation of tabular data with ease.</p> </li> <li> <p>Matplotlib: Matplotlib is a plotting library in Python. It produces high-quality graphs, charts, figures, and plots, making it a vital tool for visualizing data. It supports a wide array of graphs and a good degree of customization.</p> </li> <li> <p>Scikit-learn: Scikit-learn is a machine learning library in Python. It features various machine learning models including classification, regression, clustering, and dimensionality reduction. It also provides tools for model fitting, data preprocessing, model selection and evaluation, and many other utilities, making it a comprehensive package for machine learning tasks.</p> </li> <li> <p>Tqdm: Tqdm is a fast, extensible progress bar library for Python and CLI that enables you to track the progress of your loops or other iterative tasks. The name “tqdm” stands for “taqaddum” in Arabic which can mean “progress,” and it’s used in a variety of contexts such as downloading files, training machine learning models, or even within user-defined loops. It’s simple to use and highly customizable, making it a great tool for providing visual feedback and enhancing user experience.</p> </li> </ul> <p>In summary, these packages constitute a robust toolkit for any Python programmer involved in data science or numerical computing tasks. From managing and manipulating data to performing complex mathematical computations and rendering rich visualizations.</p> <p>So lets install the toolkit:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mamba <span class="nb">install </span>numpy scipy pandas matplotlib scikit-learn tqdm
</code></pre></div></div> <p>For all my coding I am using Visual Studio Code. <strong>Visual Studio Code</strong> (often abbreviated as VS Code) is a powerful and highly popular source-code editor developed by Microsoft. It’s used for developing and debugging web applications, scripts, and programs. It’s free and open-source, and is compatible with Windows, macOS, and Linux.</p> <p>VS Code comes with built-in support for JavaScript, TypeScript, and Node.js, with additional language support available through extensions. These extensions can provide support for a large number of programming languages including, but not limited to, Python, C++, C#, Java, PHP, Ruby, Go, and many more.</p> <p>Key features of Visual Studio Code include:</p> <ol> <li> <p><strong>Syntax Highlighting and IntelliSense</strong>: VS Code provides syntax coloring and autocompletion for a variety of languages, helping you write code more efficiently.</p> </li> <li> <p><strong>Debugging</strong>: It has a robust built-in debugger, so you can set breakpoints, inspect variables, view call stacks, and have an interactive console. This feature significantly simplifies the debugging process.</p> </li> <li> <p><strong>Git Integration</strong>: VS Code offers excellent Git integration, allowing you to perform Git operations like pulling, pushing, committing, and branching right from the editor itself.</p> </li> <li> <p><strong>Extensions and Customizability</strong>: Perhaps one of the most powerful features of VS Code is its extensibility. You can customize almost everything in VS Code, including its theme, keybindings, and settings. The VS Code Marketplace provides thousands of extensions that add new features and support for more languages.</p> </li> <li> <p><strong>Terminal Integration</strong>: VS Code has a built-in terminal that can be very handy for running scripts, commands, and tools directly within the editor.</p> </li> <li> <p><strong>Live Share</strong>: This feature allows real-time collaboration, letting two or more developers work on the same code at the same time, even if they are in different locations.</p> </li> </ol> <p>Overall, Visual Studio Code is an extremely versatile editor that can be adapted to a wide variety of development tasks, making it a favorite choice for many developers worldwide.</p> <p>In conclusion, the journey of learning and evolving as a Python programmer is a continuous one, filled with new discoveries and efficient ways to navigate the complex world of programming. It’s a path that demands adaptability, and the use of different tools and strategies for different scenarios, resulting in a uniquely personal toolkit that is refined over time.</p>]]></content><author><name></name></author><category term="workflow"/><category term="python"/><category term="toolkit"/><category term="pandas"/><category term="numpy"/><category term="matplotlib"/><category term="conda"/><category term="visual studio code"/><summary type="html"><![CDATA[I embarked on my Python programming journey in 2010, during my freshman year. Over time, I have grown familiar with Python’s unique characteristics and idiosyncrasies. The knowledge I have garnered through Python is extensive and includes: *** Building Graphical User Interfaces (GUIs) Constructing networks Managing servers Performing high-performance computing Developing AI tools Handling data Creating web applications Controlling IoT devices And much more…]]></summary></entry></feed>